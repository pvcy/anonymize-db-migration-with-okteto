name: Standup Database and Test Migration
on:
  pull_request:
    branches: [ main ]
    paths: 
    - 'users-api/src/migrations/**'

jobs:
  check-migrations:
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: "postgres"
      DB_PASSWORD: "dMVZFeBWLOzYRV71"
      POSTGRES_DB: "postgres"
      DB_HOST: "users-db"
      DB_BACKUP_URL: "https://storage.googleapis.com/anonymize-db-backups/us-west1/backup.sql"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build database container
      run: |
        docker build -t users-db --file db/Dockerfile db

    - name: Start PostgreSQL container
      run: |
        docker run -d --name $DB_HOST \
          -e POSTGRES_USER=$DB_USERNAME \
          -e POSTGRES_PASSWORD=$DB_PASSWORD \
          -e POSTGRES_DB=$POSTGRES_DB \
          -e RESTORE_FROM_BACKUP=True \
          -e DB_BACKUP_URL=$DB_BACKUP_URL \
          -p 5432:5432 \
          users-db:latest

    - name: Install Sequelize CLI and dependencies
      run: |
        cd ./users-api/src
        npm ci

    - name: Wait for Postgres to be ready
      run: |
        for i in {1..10}; do
          nc -z localhost 5432 && echo "Postgres is up" && break
          echo "Waiting for Postgres..."
          sleep 10
        done

    - name: Run Sequelize Migration
      id: migration
      run: |
        {
          cd ./users-api/src
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          OUTPUT=$(npx sequelize db:migrate --env ci 2>&1)
          EXIT_CODE=$?
          echo "MIGRATION_OUTPUT<<$EOF" >> $GITHUB_ENV
          echo "$OUTPUT" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
          echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV
        } || echo "The migration failed, check the output"

    - name: Add or Update Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { MIGRATION_OUTPUT, EXIT_CODE } = process.env
          if (!MIGRATION_OUTPUT) return

          const migrationMessage = EXIT_CODE == 0 ? 'Migration successful' : `Migration failed with exit code ${EXIT_CODE}: \`\`\`sh\n${MIGRATION_OUTPUT}\n\`\`\``;
          const commentIdentifier = 'ðŸ”„ Sequelize Migration Result'; // Unique identifier for the comment
          const commentBody = `${commentIdentifier}\n\n${migrationMessage}`;

          const pr_number = context.payload.pull_request.number;
          const { owner, repo } = context.repo;

          const payload = {
            issue_number: pr_number,
            owner,
            repo
          }
          
          // Find existing comment
          const comments = await github.rest.issues.listComments(payload);

          const migrationComment = comments.data.find(comment => comment.body.startsWith(commentIdentifier));

          // Update existing comment or create a new one
          if (migrationComment) {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: migrationComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: pr_number,
              owner,
              repo,
              body: commentBody
            });
          }

          

    - name: Cleanup
      run: docker stop $DB_HOST
