name: Standup Database and Test Migration
on:
  # pull_request:
  #   branches: [ main ]
  push:
    paths: 
    - 'users-api/src/migrations/**'

jobs:
  check-migrations:
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: "postgres"
      DB_PASSWORD: "dMVZFeBWLOzYRV71"
      POSTGRES_DB: "postgres"
      DB_HOST: "users-db"
      DB_BACKUP_URL: "https://storage.googleapis.com/anonymize-db-backups/us-west1/backup.sql"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build database container
      run: |
        docker build -t users-db --file db/Dockerfile db

    - name: Start PostgreSQL container
      run: |
        docker run -d --name $DB_HOST \
          -e POSTGRES_USER=$DB_USERNAME \
          -e POSTGRES_PASSWORD=$DB_PASSWORD \
          -e POSTGRES_DB=$POSTGRES_DB \
          -e RESTORE_FROM_BACKUP=True \
          -e DB_BACKUP_URL=$DB_BACKUP_URL \
          -p 5432:5432 \
          users-db:latest

    - name: Install Sequelize CLI and dependencies
      run: |
        cd ./users-api/src
        npm ci

    - name: Wait for Postgres to be ready
      run: |
        for i in {1..10}; do
          nc -z localhost 5432 && echo "Postgres is up" && break
          echo "Waiting for Postgres..."
          sleep 10
        done

    - name: Run Sequelize Migration
      id: migration
      run: |
        cd ./users-api/src
        echo 'MIGRATION_OUTPUT<<EOF' >> $GITHUB_OUTPUT
        npx sequelize db:migrate --env ci 2>&1 >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
        
        # OUTPUT=$(npx sequelize db:migrate --env ci 2>&1) || true
        # EXIT_CODE=$?
        # echo "MIGRATION_OUTPUT=$OUTPUT" >> $GITHUB_OUTPUT
        # echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_STATE

    - name: Add or Update Comment on PR
      env:
        MIGRATION_OUTPUT: ${{ steps.migration.outputs.MIGRATION_OUTPUT }}
      run: |
        echo "Output: $MIGRATION_OUTPUT"
      # uses: actions/github-script@v7
      # if: always() # Ensures this step runs even if the migration step fails
      # env:
      #   OUTPUT: ${{ steps.migration.outputs.output }}
      #   EXIT_CODE: ${{ steps.migration.outputs.exit_code }}
      
      # with:
      #   script: |
      #     const { OUTPUT, EXIT_CODE } = process.env
      #     if (!OUTPUT) {
      #       console.log("no output")
      #       return
      #     }

      #     const migrationMessage = exitCode == 0 ? 'Migration successful' : `Migration failed with exit code ${EXIT_CODE}: ${OUTPUT}`;
      #     const commentIdentifier = 'ðŸ”„ Sequelize Migration Result'; // Unique identifier for the comment
      #     const commentBody = `${commentIdentifier}\n${migrationMessage}`;

      #     const issue_number = context.issue.number;
      #     const { owner, repo } = context.repo;

      #     // Find existing comment
      #     const comments = await github.rest.issues.listComments({
      #       issue_number,
      #       owner,
      #       repo
      #     });

      #     const migrationComment = comments.data.find(comment => comment.body.startsWith(commentIdentifier));

      #     // Update existing comment or create a new one
      #     if (migrationComment) {
      #       await github.rest.issues.updateComment({
      #         owner,
      #         repo,
      #         comment_id: migrationComment.id,
      #         body: commentBody
      #       });
      #     } else {
      #       await github.rest.issues.createComment({
      #         issue_number,
      #         owner,
      #         repo,
      #         body: commentBody
      #       });
      #     }

    - name: Cleanup
      run: docker stop $DB_HOST
