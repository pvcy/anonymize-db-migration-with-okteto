name: Standup Database and Test Migration
on:
  pull_request:
    branches: [ main ]
    paths: 
    - 'users-api/src/migrations/**'

jobs:
  check-migrations:
    runs-on: ubuntu-latest
    env:
      GCP_PROEJCT_ID: "database-migration-with-okteto"
      DB_HOST: "users-db"
      POSTGRES_PASSWORD: "dMVZFeBWLOzYRV71"
      DB_USERNAME: "postgres"
      POSTGRES_DB: "postgres"
      DB_BACKUP_URL: "https://storage.googleapis.com/anonymize-db-backups/us-west1/backup.sql"

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate with GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Use gcloud CLI
      run: gcloud info

    - name: Configure Docker to authenticate with GCR
      run: |
        gcloud auth configure-docker
    
    - name: Pull PostgreSQL image from GCP
      run: |
        docker pull gcr.io/$GCP_PROEJCT_ID/$DB_HOST:latest

    - name: Start PostgreSQL container
      run: |
        docker run -d --name $DB_HOST \
          -e POSTGRES_USER=$DB_USERNAME \
          -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
          -e POSTGRES_DB=$POSTGRES_DB \
          -e RESTORE_FROM_BACKUP=True \
          -e DB_BACKUP_URL=$DB_BACKUP_URL \
          -p 5432:5432 \
          gcr.io/$GCP_PROEJCT_ID/$DB_HOST:latest

    - name: Install Sequelize CLI and dependencies
      run: |
        cd ./users-api/src
        npm install

    - name: Wait for Postgres to be ready
      run: |
        for i in {1..10}; do
          nc -z localhost 5432 && echo "Postgres is up" && break
          echo "Waiting for Postgres..."
          sleep 10
        done

    - name: Run Sequelize Migration
      id: migration
      run: |
        cd ./users-api/src
        OUTPUT=$(npx sequelize db:migrate)
        EXIT_CODE=$?
        echo "::set-output name=exit_code::$EXIT_CODE"
        echo "::set-output name=output::$OUTPUT"

    - name: Add or Update Comment on PR
      uses: actions/github-script@v7
      if: always() # Ensures this step runs even if the migration step fails
      with:
        script: |
          const output = ${{ steps.migration.outputs.output }};
          const exitCode = ${{ steps.migration.outputs.exit_code }};
          const migrationMessage = exitCode == 0 ? 'Migration successful' : `Migration failed with exit code ${exitCode}: ${output}`;
          const commentIdentifier = 'ðŸ”„ Sequelize Migration Result'; // Unique identifier for the comment
          const commentBody = `${commentIdentifier}\n${migrationMessage}`;

          const issue_number = context.issue.number;
          const { owner, repo } = context.repo;

          // Find existing comment
          const comments = await github.rest.issues.listComments({
            issue_number,
            owner,
            repo
          });

          const migrationComment = comments.data.find(comment => comment.body.startsWith(commentIdentifier));

          // Update existing comment or create a new one
          if (migrationComment) {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: migrationComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: commentBody
            });
          }

    - name: Cleanup
      run: docker stop $DB_HOST

